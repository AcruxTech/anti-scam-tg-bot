from aiogram import Bot, Router, F
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from src.repository import IntegrityException
from src.keyboards.basic import get_send_user_keyboard, get_main_menu_keyboard
from src.entities.scammers.schemas import ScammerScheme
from src.entities.scammers.models import scammers_repository
from src.entities.scammers.service import scammers_service

scammer_router = Router()


class AddScammerForm(StatesGroup):
    get_profile = State()
    add_profile = State()
    detect_hide_profile = State()
    add_scam_to_database = State()


@scammer_router.message(F.text == "–ö–∏–Ω—É—Ç—å —Ä–µ–ø–æ—Ä—Ç  ‚úç")
async def send_scam_user(message: Message, bot: Bot, state: FSMContext):
    await message.answer(
        f"–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç", reply_markup=get_send_user_keyboard()
    )
    await state.set_state(AddScammerForm.get_profile)


@scammer_router.message(AddScammerForm.get_profile, F.text == "–ù–∞–∑–∞–¥")
async def back(message: Message, bot: Bot, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_menu_keyboard())
    await state.clear()


@scammer_router.message(AddScammerForm.get_profile)
async def get_scam(message: Message, bot: Bot, state: FSMContext):
    if message.user_shared:
        await get_scam_user(message, state)
    elif message.forward_from is not None:
        await message.answer(f"–í—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.forward_from.first_name}: {message.text}")
        await message.answer("–ú–æ—à—à–µ–Ω–∏–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É ‚úÖ", reply_markup=get_main_menu_keyboard())
        scammer = ScammerScheme(**message.forward_from.model_dump())
        await scammers_service.add_scammer(scammer)
        await state.clear()
    else:
        await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ —Å–∫—Ä—ã–ª –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ, –ª–∏–±–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ \n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëáüëáüëá",
            reply_markup=get_send_user_keyboard()
        )


@scammer_router.message(AddScammerForm.detect_hide_profile)
async def get_scam_user(message: Message, state: FSMContext):
    await message.answer("–ú–æ—à–µ–Ω–Ω–∏–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É ‚úÖ", reply_markup=get_main_menu_keyboard())
    data = {"id": message.user_shared.user_id}
    await scammers_service.add_scammer(ScammerScheme(**data))
    await state.clear()


# @scammer_router.message_handler(state=Form.age)
# async def process_age(message: types.Message, state: Form):
#     async with state.proxy() as data:
#         data['age'] = message.text
#     await message.reply("–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?")
#     await Form.city.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'city'
#
#
# @scammer_router.message_handler(state=Form.city)
# async def process_city(message: types.Message, state: Form):
#     async with state.proxy() as data:
#         data['city'] = message.text
#
#         # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã, –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
#         # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –∫—É–¥–∞-—Ç–æ –µ—â–µ
#         await message.reply(f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —á—Ç–æ —è —É–∑–Ω–∞–ª: "
#                             f"–¢–µ–±—è –∑–æ–≤—É—Ç {data['name']}, —Ç–µ–±–µ {data['age']} –ª–µ—Ç –∏ —Ç—ã –∏–∑ –≥–æ—Ä–æ–¥–∞ {data['city']}")
#         # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
#         await state.finish()
