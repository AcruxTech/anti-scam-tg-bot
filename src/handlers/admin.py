from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from src.entities.scammers.service import scammers_service
from src.utils.excel import create_list_scammer
from src.keyboards.admin import get_admin_inline_keyboard
from src.keyboards.basic import get_send_user_keyboard, get_main_menu_keyboard
from src.utils.scammers import get_scammer_data_from_message
from src.entities.scammers.models import proof_repository
from src.repository import IntegrityException


class AdminForm(StatesGroup):
    get_user = State()
    get_username = State()
    get_proofs = State()
    delete_user = State()


router = Router()


F: Message


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def back(message: Message, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_menu_keyboard(message.from_user.id))
    await state.clear()


@router.message(F.text == "–ó–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É  üìä")
async def open_admin(message: Message, bot: Bot):
    await message.answer("–í—ã –∑–∞—à–ª–∏ –≤ –∞–¥–º–∏–Ω–∫—É \n\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_inline_keyboard())


F: CallbackQuery


@router.callback_query(F.data == "get_scammer_list")
async def get_list_scammer(call: CallbackQuery, bot: Bot):
    await call.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤...")
    filename = await create_list_scammer()
    document = FSInputFile(path=filename)
    await bot.send_document(call.message.chat.id, document)
    await call.answer("–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


@router.callback_query(F.data == "add_scammer")
async def start_add_scammer(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.message.answer(
        "–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ üëáüëáüëá", reply_markup=get_send_user_keyboard()
    )
    await state.set_state(AdminForm.get_user)
    await call.answer()


@router.callback_query(F.data == "delete_scammer")
async def start_delete_scammer(call: CallbackQuery, bot: Bot, state: FSMContext):
    await call.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –º–æ—à–µ–Ω–Ω–∏–∫–∞ (–∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç üëáüëáüëá",
        reply_markup=get_send_user_keyboard()
    )
    await state.set_state(AdminForm.delete_user)


F: Message


@router.message(AdminForm.delete_user)
async def delete_user(message: Message, bot: Bot, state: FSMContext):
    try:
        scammer_id = int(message.text)
    except (TypeError, ValueError):
        if message.user_shared or (message.forward_from is not None and message.forward_from.id != message.from_user.id):
            scammer_deleted = await scammers_service.delete_scammer(
                message.user_shared.user_id if message.user_shared else message.forward_from.id
            )
            if scammer_deleted:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã  ‚úÖ", reply_markup=get_main_menu_keyboard(
                    message.from_user.id
                ))
                await state.clear()
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ  üö´")
        else:
            await message.answer(
                "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ —Å–∫—Ä—ã–ª –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ, –ª–∏–±–æ –≤—ã —Å–∫–∏–Ω—É–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ \n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ ID –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–Ω–æ–ø–∫–Ω–æ–π –Ω–∏–∂–µ üëáüëáüëá"
            )
    else:
        scammer_deleted = await scammers_service.delete_scammer(scammer_id)
        if scammer_deleted:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã  ‚úÖ", reply_markup=get_main_menu_keyboard(
                message.from_user.id
            ))
            await state.clear()
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ  üö´")


@router.message(AdminForm.get_user)
async def get_user(message: Message, bot: Bot, state: FSMContext):
    if message.user_shared or (message.forward_from is not None and message.forward_from.id != message.from_user.id):
        await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –º–æ—à–µ–Ω–Ω–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω  ‚úÖ", reply_markup=get_main_menu_keyboard(message.from_user.id))
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ username –º–æ—à–µ–Ω–Ω–∏–∫–∞:")
        scammer = get_scammer_data_from_message(message)
        await state.update_data(scammer=scammer)
        await state.set_state(AdminForm.get_username)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ —Å–∫—Ä—ã–ª –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ, –ª–∏–±–æ –≤—ã —Å–∫–∏–Ω—É–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ \n\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–Ω–æ–ø–∫–Ω–æ–π –Ω–∏–∂–µ üëáüëáüëá")


@router.message(AdminForm.get_username)
async def get_username(message: Message, state: FSMContext):
    if message.text:
        data = await state.get_data()
        scammer = data["scammer"]
        scammer.username = message.text.replace("https://t.me/", "").replace("@", "")
        await state.update_data(scammer=scammer)
        await message.answer("Username –º–æ—à–µ–Ω–Ω–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω  ‚úÖ")
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ—à–µ–Ω–Ω–∏–∫ –∑–∞–Ω–æ—Å–∏—Ç—Å—è –≤ –±–∞–∑—É:")
        await state.set_state(AdminForm.get_proofs)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–∏ÃÜ username")


@router.message(AdminForm.get_proofs)
async def get_proofs(message: Message, bot: Bot, state: FSMContext):
    if message.text:
        data = await state.get_data()
        scammer = data["scammer"]
        scammer_created = await scammers_service.add_scammer(scammer)
        await scammers_service.confirm(scammer_created.id)
        await proof_repository.create({
            "scammer_id": scammer.id,
            "text": message.text,
            "user_id": message.from_user.id,
            "decision": True,
            "moderator_id": message.from_user.id
        })
        await scammers_service.confirm(scammer_created.id)
        await state.clear()
        await message.answer("–ú–æ—à–µ–Ω–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É  ‚úÖ", reply_markup=get_main_menu_keyboard(message.from_user.id))
    else:
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –º–æ—à–µ–Ω–Ω–∏–∫ –∑–∞–Ω–æ—Å–∏—Ç—Å—è –≤ –±–∞–∑—É")
