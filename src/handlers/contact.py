from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from src.config import TECH_SUPPORT_ID
from src.keyboards.menu import get_contact_answer
from src.keyboards.basic import get_contact_cancel_keyboard, get_main_menu_keyboard
from src.utils.callbacks import ContactMessage
from src.entities.contact.service import contact_message_service


class ContactState(StatesGroup):
    get_contact_text = State()
    get_text_for_contact = State()


router = Router()


F: Message


@router.message(F.text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏  üìû")
async def start_contact(message: Message, bot: Bot, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ! üëáüëáüëá", reply_markup=get_contact_cancel_keyboard())
    await state.set_state(ContactState.get_contact_text)


@router.message(ContactState.get_contact_text, F.text == "–ù–∞–∑–∞–¥")
async def back(message: Message, bot: Bot, state: FSMContext):
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=get_main_menu_keyboard())
    await state.clear()


@router.message(ContactState.get_contact_text, F.text)
async def get_text_contact(message: Message, bot: Bot, state: FSMContext):
    await bot.send_message(TECH_SUPPORT_ID, text=f"–ü—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{message.from_user.username}</b>:")
    contact_message = await contact_message_service.create_contact_message(message.from_user.id, message.text)
    await bot.send_message(
        TECH_SUPPORT_ID, text=f"<b>{message.from_user.username}</b>: {message.text}",
        reply_markup=get_contact_answer(contact_message_id=contact_message.id)
    )
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –ú—ã –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()


F: CallbackQuery


@router.callback_query(ContactMessage.filter())
async def answer_to_contact(callback: CallbackQuery, callback_data: ContactMessage, state: FSMContext):
    await callback.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:")
    await state.update_data(contact_message_id=callback_data.id)
    await state.set_state(ContactState.get_text_for_contact)


F: Message


@router.message(ContactState.get_text_for_contact, F.text)
async def send_message_to_contact(message: Message, bot: Bot, state: FSMContext):
    contact_data = await state.get_data()
    contact_message_id = contact_data["contact_message_id"]
    contact_message = await contact_message_service.answer_contact_message(
        contact_message_id, message.text, message.from_user.id
    )
    await message.answer("–û—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  ‚úÖ")
    await bot.send_message(
        contact_message.contact_id, text=f"–ú—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: <b>{contact_message.message}</b>"
    )
    await bot.send_message(
        contact_message.contact_id, text=f"–û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: <b>{message.text}</b>",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
